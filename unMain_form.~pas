unit unMain_form;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls, Buttons;

type
  TfrmMain = class(TForm)
    mmCode: TMemo;
    mmOperand: TMemo;
    mmOperator: TMemo;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    lblNUOprtr: TLabeledEdit;
    lblNUOprnd: TLabeledEdit;
    lblNoprtr: TLabeledEdit;
    lblNoprnd: TLabeledEdit;
    lblHPVoc: TLabeledEdit;
    lblHPLen: TLabeledEdit;
    lblHPVol: TLabeledEdit;
    lblHDiff: TLabeledEdit;
    btnRun: TBitBtn;
    btnLoadCode: TBitBtn;
    lblHPLen1: TLabeledEdit;
    lblLevelPrg: TLabeledEdit;
    lblHPVol1: TLabeledEdit;
    lblLevelPrg1: TLabeledEdit;
    lblIntllgnc: TLabeledEdit;
    lblE: TLabeledEdit;
    procedure btnLoadCodeClick(Sender: TObject);
    procedure btnRunClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmMain: TfrmMain;

implementation

uses StrUtils, Math;

{$R *.dfm}

const
    NOperator = 69;//Кол-во элементов массива
//Операторы, символы-разделители, имена процедур и знаки операции С++
    arrOperator: array[1..NOperator] of string = ('while','for','try','catch',
     'switch','case','default','break','continue','return','struct','class',//12
     'goto','new','delete','const','if','else','operator','system','setlocale',//21
     'enum','sizeof','this','true','false','using namespace','cin','cout','throw','endl',//29
     '::','++','--','>>','<<','<=','>=','==','!=','&&','||','?:','*=','/=',//42
     '%=','+=','–=','<<=','>>=','&=','|=','^=','.*','->*',
     '=','+','-','*','/','%','>','<','~','&','|','^','?',';');

{--- НЕ ИСПОЛЬЗУЕТСЯ ---}
//   NOperand = 10;
//   arrOperand: array[1..NOperand] of string = ('bool', 'char', 'double',
//   'float', 'int', 'long', 'short', 'signed', 'usigned', 'void');

 var
  txtFile:TextFile;//Переменная для работы с текстовым файлом

//Процедура удаляет коментраии и строки
procedure DeleteComment(var code:AnsiString);
 var
  sizeCode,i:Integer;
  IsComment,IsStr,IsCommentMltln:Boolean;
begin
  sizeCode:=Length(code);
  IsStr:=False;
  IsComment:=False;
  IsCommentMltln:=False;
  for i:=1 to sizeCode do begin
//Нахожу ковычку и эта ковычка не в коментарии, значит затираю её
    if (code[i]='"') and (IsComment=False) and (IsCommentMltln=false)
     then begin
      if (IsStr=True)
       then begin
        code[i]:=' ';
        IsStr:=False
        end
       else IsStr:=True;
      end;

     if (IsStr=True) //Режим строки True, значит затираю символ
      then code[i]:=' ';

     if ((code[i]='/') and (code[i+1]='/') and (IsStr=False) and (IsCommentMltln=false))//Начало коментария
        or ((code[i]=''#$D'') and  (code[i+1]=''#$A'') and (IsComment=True))//Конец коментария
     then begin
      if (IsComment=True)
       then IsComment:=False
       else IsComment:=True;
      end;

     if (IsComment=True)
      then code[i]:=' ';

      if ((code[i]='/') and (code[i+1]='*') and (IsStr=False) and (IsComment=false))
        or ((code[i]='*') and  (code[i+1]='/') and (IsCommentMltln=True))
      then begin
       if (IsCommentMltln=True)
       then begin
        IsCommentMltln:=False;
        code[i]:=' ';
        code[i+1]:=' ';
        end
       else IsCommentMltln:=True;
      end;

      if (IsCommentMltln=True)
       then code[i]:=' ';
   end;
end;

//Ф-ция подсчитывает число уникальных и общее число операторов
procedure CountOperator(var code:AnsiString; var NUnique:Integer; var NAll:Integer);
 var
   i, N:Integer;
   flg:Boolean;
begin
  N:=0;
  NAll:=0;
  NUnique:=0;

  for i:=1 to NOperator do begin//Кручу для каждого оператора
    flg:=False;
//Цикл крутится до тех пор пока не найдёт все вхождения в тексте данного оператора
   while (flg=False) do begin
    if (Pos(arrOperator[i],code)<>0)//Если найден оператор
     then begin
      Inc(N);//Увеличиваю кол-во
      code:=StringReplace(code,arrOperator[i],' ',[]);//Заменяю найденный оператор на пустую строку
     end
//Если оператор на найден заканчиваю цикл
     else flg:=True;
   end;
   if N>0 //Если оператор был найден
    then begin
     frmMain.mmOperator.Lines.Add(arrOperator[i]);//Добавляю его в memo
     Inc(NUnique);//Увеличиваю уникальный оператор на 1
     NAll:=NAll+N;
     N:=0;
    end;
 end;
end;

//Процедура удаляет зарезервированные слова С++
//которые НЕ являются операторами и операндыми
procedure ReplaceVermin(var code:AnsiString);
 const
    Vermin: array[1..2] of string = ('include','iostream');
  var
     i:Integer;
begin
   for i:=1 to  High(Vermin) do begin
    code:=StringReplace(code,Vermin[i],' ',[rfReplaceAll]);
   end;
end;

//Удаляет дубликаты из стринг листа
procedure RemoveDuplicates(var stringList : TStringList) ;
var
  buffer: TStringList;
  cnt: Integer;
begin
  stringList.Sort;//Сортирую
  buffer := TStringList.Create;//Создаю новый лист
  try
    buffer.Sorted := True;//Он сразу будет сортировать данные
    buffer.Duplicates := dupIgnore;//Дубликаты добавляться не будут
    buffer.BeginUpdate;
    for cnt := 0 to stringList.Count - 1 do
      buffer.Add(stringList[cnt]) ;//Добавляю в соозданный StrinList элементы СтрингЛиста (который по переменной пришёл)
    buffer.EndUpdate;
//Присваиваю буферный стринг лист СтрингЛисту (который по переменной пришёл)
//В результате он будет содержать, информацию без дубликатов
    stringList.Assign(buffer) ;
  finally
    FreeandNil(buffer) ;//Уничтожаю объект
  end;
end;

//Выполняет подсчёт кол-ва операндов
procedure CountOperand (var code:AnsiString; var NUnique:Integer; var NAll:Integer);
 const
    Letter = ['a'..'z','A'..'Z','0'..'9'];
  var
    sizeCode,i:Integer;
    Operand:String;

    List:TStringList;
begin
  List:=TStringList.Create;
  try
   sizeCode:=Length(code);

    NAll:=0;
    NUnique:=0;
   for i:=1 to sizeCode do begin
     if (code[i] in Letter)
     then Operand:=Operand+code[i];
//Нашёл слово, т.к операторы из текста уже удаленны, то любое встреченное слово,буква, цифра - это операнд
    if (Length(Operand)<>0) and ((code[i]=' ') or (code[i]=''))
     then begin
       List.Add(Operand);
       Operand:=EmptyStr;
     end;
   end;
    NAll:=List.Count;
    RemoveDuplicates(List);
    NUnique:=List.Count;
     frmMain.mmOperand.Lines:=List;
   finally
    List.Free;
   end;
end;


procedure TfrmMain.btnLoadCodeClick(Sender: TObject);
 var
    lineRead:String;
begin
 mmCode.Clear; //Чищу поле перед чтением из файла
  AssignFile(txtFile,'fileCode.txt');//Связываю переменную с файлом
   Reset(txtFile);  //Открываю на чтение
   while not EOF(txtFile) do begin //Читаю пока не достигнут конец файла
    Readln(txtFile,lineRead); //Читаю строку
    mmCode.Lines.Add(lineRead);//Добавляю её в Memo
   end;
  CloseFile(txtFile);//Закрываю файл
end;


procedure TfrmMain.btnRunClick(Sender: TObject);
 var
   code:AnsiString;
   NUOprtr, NUOprnd, Noprtr, Noprnd,HPVoc,HPLen:Integer;
   HPVol,HPVol1,HPLen1,LevelPrg,LevelPrg1,HDiff,Intllgnc,E:Extended;
begin
 //Чищу мемо
  mmOperand.Clear;
  mmOperator.Clear;
//Записываю анализируемый код в переменную
  code:=mmCode.Text;
//Удяляю комменты
  DeleteComment(code);
//Удаляю зарезервированные слова
  ReplaceVermin(code);
//Выполняю расчёты
  CountOperator(code,NUOprtr,Noprtr);//операторы (n1,N1)
  CountOperand(code,NUOprnd,Noprnd);//операнды (n2,N2)
  HPVoc:=NUOprtr + NUOprnd;//Словарь программы (n)
  HPLen:= Noprtr + Noprnd;//Длинна программы (N)
  HPVol:= HPLen* log2(HPVoc);//Объём программы (V)
  HPVol1:= HPLen* log2(HPLen);// Потенциальный объём программы (V*)
  HPLen1:= (NUOprtr * log2(NUOprtr)) + (NUOprnd * log2(NUOprnd));// Теоритическая длинна программы (N^)
  LevelPrg:= HPVol1/HPVol;//Уровень программы (L)
  LevelPrg1:=(2*NUOprnd) / (NUOprtr*Noprnd) ; //Уровень программы (реальный) (L^)
  Intllgnc:=LevelPrg*HPVol; // Интелектуальное содержание алгоритма (I)
  E:=HPLen1* log2(HPVoc/LevelPrg);// Интелектуальные усилия (E)
//  HDiff:= (NUOprtr/2) * (NOprnd / NUOprnd);//Сложносность программы

//Заношу полученные значение в LabelEdit
  lblNUOprtr.Text:=IntToStr(NUOprtr);
  lblNoprtr.Text:=IntToStr(Noprtr);

  lblNUOprnd.Text:=IntToStr(NUOprnd);
  lblNoprnd.Text:=IntToStr(Noprnd);

  lblHPVoc.Text:=IntToStr(HPVoc);
  lblHPLen.Text:=IntToStr(HPLen);
  lblHPVol.Text:=FloatToStrF(HPVol,ffFixed,10,2);
  lblHPVol1.Text:=FloatToStrF(HPVol1,ffFixed,10,2);
  lblHPLen1.Text:=FloatToStrF(HPLen1,ffFixed,10,2);
  lblLevelPrg.Text:=FloatToStrF(LevelPrg,ffFixed,10,2);
  lblLevelPrg1.Text:=FloatToStrF(LevelPrg1,ffFixed,10,2);
  lblIntllgnc.Text:=FloatToStrF(Intllgnc,ffFixed,10,2);
  lblE.Text:=FloatToStrF(E,ffFixed,10,2);
//  lblHDiff.Text:=FloatToStrF(HDiff,ffFixed,10,2);
end;

end.
